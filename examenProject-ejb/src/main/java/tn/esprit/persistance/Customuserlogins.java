package tn.esprit.persistance;
// Generated 19 nov. 2016 13:17:14 by Hibernate Tools 4.3.1.Final

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Customuserlogins generated by hbm2java
 */
@Entity
@Table(name = "customuserlogins", catalog = "troc")
public class Customuserlogins implements java.io.Serializable {

	private Integer id;
	private Swapper swapper;
	private String loginProvider;
	private String providerKey;
	private int userId;
	private static final long serialVersionUID = 1L;

	public Customuserlogins() {
	}

	public Customuserlogins(int userId) {
		this.userId = userId;
	}

	public Customuserlogins(Swapper swapper, String loginProvider, String providerKey, int userId) {
		this.swapper = swapper;
		this.loginProvider = loginProvider;
		this.providerKey = providerKey;
		this.userId = userId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "Id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "swapper_Id")
	public Swapper getSwapper() {
		return this.swapper;
	}

	public void setSwapper(Swapper swapper) {
		this.swapper = swapper;
	}

	@Column(name = "LoginProvider")
	public String getLoginProvider() {
		return this.loginProvider;
	}

	public void setLoginProvider(String loginProvider) {
		this.loginProvider = loginProvider;
	}

	@Column(name = "ProviderKey")
	public String getProviderKey() {
		return this.providerKey;
	}

	public void setProviderKey(String providerKey) {
		this.providerKey = providerKey;
	}

	@Column(name = "UserId", nullable = false)
	public int getUserId() {
		return this.userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

}
